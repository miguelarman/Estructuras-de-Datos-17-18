{"changed":true,"filter":false,"title":"sales_odbc","tooltip":"/sales_odbc","value":"#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <sql.h>\n#include <sqlext.h>\n#include \"odbc.h\"\n\n/*\n * example 4 with a queries build on-the-fly, the good way\n */\n\nint main(void) {\n    SQLHENV env;\n    SQLHDBC dbc;\n    SQLHSTMT stmt;\n    SQLRETURN ret; /* ODBC API return status */\n    SQLINTEGER x;\n    SQLCHAR y[512];\n\n    /* CONNECT */\n    ret = odbc_connect(&env, &dbc);\n    if (!SQL_SUCCEEDED(ret)) {\n        return EXIT_FAILURE;\n    }\n\n    /* Allocate a statement handle */\n    SQLAllocHandle(SQL_HANDLE_STMT, dbc, &stmt);\n\n    SQLPrepare(stmt, (SQLCHAR*) \"select y from a where x = ?\", SQL_NTS);\n\n    printf(\"x = \");\n    fflush(stdout);\n    while (scanf(\"%d\", &x) != EOF) {\n        SQLBindParameter(stmt, 1, SQL_PARAM_INPUT, SQL_C_SLONG, SQL_INTEGER, 0, 0, &x, 0, NULL);\n        \n        SQLExecute(stmt);\n        \n        SQLBindCol(stmt, 1, SQL_C_CHAR, y, sizeof(y), NULL);\n\n        /* Loop through the rows in the result-set */\n        while (SQL_SUCCEEDED(ret = SQLFetch(stmt))) {\n            printf(\"y = %s\\n\", y);\n        }\n\n        SQLCloseCursor(stmt);\n\n        printf(\"x = \");\n        fflush(stdout);\n    }\n    printf(\"\\n\");\n\n    /* free up statement handle */\n    SQLFreeHandle(SQL_HANDLE_STMT, stmt);\n\n    /* DISCONNECT */\n    ret = odbc_disconnect(env, dbc);\n    if (!SQL_SUCCEEDED(ret)) {\n        return EXIT_FAILURE;\n    }\n\n    return EXIT_SUCCESS;\n}","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":61,"column":1},"action":"insert","lines":["#include <stdlib.h>","#include <stdio.h>","#include <string.h>","#include <sql.h>","#include <sqlext.h>","#include \"odbc.h\"","","/*"," * example 4 with a queries build on-the-fly, the good way"," */","","int main(void) {","    SQLHENV env;","    SQLHDBC dbc;","    SQLHSTMT stmt;","    SQLRETURN ret; /* ODBC API return status */","    SQLINTEGER x;","    SQLCHAR y[512];","","    /* CONNECT */","    ret = odbc_connect(&env, &dbc);","    if (!SQL_SUCCEEDED(ret)) {","        return EXIT_FAILURE;","    }","","    /* Allocate a statement handle */","    SQLAllocHandle(SQL_HANDLE_STMT, dbc, &stmt);","","    SQLPrepare(stmt, (SQLCHAR*) \"select y from a where x = ?\", SQL_NTS);","","    printf(\"x = \");","    fflush(stdout);","    while (scanf(\"%d\", &x) != EOF) {","        SQLBindParameter(stmt, 1, SQL_PARAM_INPUT, SQL_C_SLONG, SQL_INTEGER, 0, 0, &x, 0, NULL);","        ","        SQLExecute(stmt);","        ","        SQLBindCol(stmt, 1, SQL_C_CHAR, y, sizeof(y), NULL);","","        /* Loop through the rows in the result-set */","        while (SQL_SUCCEEDED(ret = SQLFetch(stmt))) {","            printf(\"y = %s\\n\", y);","        }","","        SQLCloseCursor(stmt);","","        printf(\"x = \");","        fflush(stdout);","    }","    printf(\"\\n\");","","    /* free up statement handle */","    SQLFreeHandle(SQL_HANDLE_STMT, stmt);","","    /* DISCONNECT */","    ret = odbc_disconnect(env, dbc);","    if (!SQL_SUCCEEDED(ret)) {","        return EXIT_FAILURE;","    }","","    return EXIT_SUCCESS;","}"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":61,"column":1},"end":{"row":61,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1510077641118}